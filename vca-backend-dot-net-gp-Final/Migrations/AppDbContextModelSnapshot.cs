// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VCA.Repositories;

#nullable disable

namespace VCA.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VCA.Models.AlternateComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AltComponentId")
                        .HasColumnType("int")
                        .HasColumnName("alt_comp_id");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("comp_id");

                    b.Property<double>("DeltaPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("double")
                        .HasColumnName("delta_price");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("mod_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AltComponentId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("mod_id");

                    b.ToTable("alternate_components");
                });

            modelBuilder.Entity("VCA.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("comp_name");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("components");
                });

            modelBuilder.Entity("VCA.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AltCompId")
                        .HasColumnType("int")
                        .HasColumnName("alt_comp_id");

                    b.Property<int?>("AuthId")
                        .HasColumnType("int")
                        .HasColumnName("auth_id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("mod_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AltCompId");

                    b.HasIndex("AuthId");

                    b.HasIndex("ModelId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("VCA.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ManuName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("manu_name");

                    b.Property<int>("SegId")
                        .HasColumnType("int")
                        .HasColumnName("seg_id");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SegId");

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("VCA.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_path");

                    b.Property<int?>("ManuId")
                        .HasColumnType("int")
                        .HasColumnName("manu_id");

                    b.Property<int>("MinQty")
                        .HasColumnType("int")
                        .HasColumnName("min_qty");

                    b.Property<string>("ModName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mod_name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("SafetyRating")
                        .HasColumnType("int")
                        .HasColumnName("safety_rating");

                    b.Property<int>("SegId")
                        .HasColumnType("int")
                        .HasColumnName("seg_id");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ManuId");

                    b.HasIndex("SegId");

                    b.ToTable("models");
                });

            modelBuilder.Entity("VCA.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address_line2");

                    b.Property<string>("AuthorizedPersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("authorized_person_name");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("comp_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("GstNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gst_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pin_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.ToTable("registration");
                });

            modelBuilder.Entity("VCA.Models.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("SegName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("seg_name");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("segments");
                });

            modelBuilder.Entity("VCA.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CompType")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("comp_type");

                    b.Property<int>("IsConfigurable")
                        .HasColumnType("int")
                        .HasColumnName("is_configurable");

                    b.Property<int>("comp_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("mod_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("comp_id");

                    b.HasIndex("mod_id");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("VCA.Models.AlternateComponent", b =>
                {
                    b.HasOne("VCA.Models.Component", "AltComponent")
                        .WithMany("AlternateComponents")
                        .HasForeignKey("AltComponentId")
                        .IsRequired();

                    b.HasOne("VCA.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCA.Models.Model", "ModId")
                        .WithMany("alternateComponents")
                        .HasForeignKey("mod_id");

                    b.Navigation("AltComponent");

                    b.Navigation("Component");

                    b.Navigation("ModId");
                });

            modelBuilder.Entity("VCA.Models.Invoice", b =>
                {
                    b.HasOne("VCA.Models.AlternateComponent", "AlternateComponent")
                        .WithMany()
                        .HasForeignKey("AltCompId");

                    b.HasOne("VCA.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("AuthId");

                    b.HasOne("VCA.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternateComponent");

                    b.Navigation("Model");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("VCA.Models.Manufacturer", b =>
                {
                    b.HasOne("VCA.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("VCA.Models.Model", b =>
                {
                    b.HasOne("VCA.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManuId");

                    b.HasOne("VCA.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("VCA.Models.Vehicle", b =>
                {
                    b.HasOne("VCA.Models.Component", "Comp_")
                        .WithMany()
                        .HasForeignKey("comp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VCA.Models.Model", "Mod_")
                        .WithMany()
                        .HasForeignKey("mod_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comp_");

                    b.Navigation("Mod_");
                });

            modelBuilder.Entity("VCA.Models.Component", b =>
                {
                    b.Navigation("AlternateComponents");
                });

            modelBuilder.Entity("VCA.Models.Model", b =>
                {
                    b.Navigation("alternateComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
